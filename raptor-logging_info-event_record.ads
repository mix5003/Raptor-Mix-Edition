-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.DateTime;
limited with MSSyst.String;
limited with MSSyst.Type_k;
with raptor.logging_info;
with raptor.logging_info.event_kind;
package raptor.logging_info.event_record is
   type Typ is new MSSyst.Object.Typ   with record
      Username : access MSSyst.String.Typ'Class;
      pragma Import(MSIL,Username,"Username");
      Machine_Name : access MSSyst.String.Typ'Class;
      pragma Import(MSIL,Machine_Name,"Machine_Name");
      Kind : raptor.logging_info.event_kind.Valuetype;
      pragma Import(MSIL,Kind,"Kind");
      Time : MSSyst.DateTime.Valuetype;
      pragma Import(MSIL,Time,"Time");
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_event_record(
      This : Ref := null;
      user : access MSSyst.String.Typ'Class;
      machine : access MSSyst.String.Typ'Class;
      k : raptor.logging_info.event_kind.Valuetype;
      t : MSSyst.DateTime.Valuetype) return Ref;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_event_record);
end raptor.logging_info.event_record;
pragma Import(MSIL,raptor.logging_info.event_record,
   ".ver 4:0:5:2",
   "[raptor]raptor.logging_info/event_record");
