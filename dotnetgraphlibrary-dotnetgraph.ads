-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.String;
limited with MSSyst.Type_k;
limited with MSSyst.Windows.Forms.Control;
limited with dotnetgraphlibrary.Color_Type;
limited with dotnetgraphlibrary.Mouse_Button;
package dotnetgraphlibrary.dotnetgraph is
   type Typ is new MSSyst.Object.Typ   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_dotnetgraph(
      This : Ref := null) return Ref;
   procedure Abort_Operation;
   procedure BARTPE_Initialize(
      tv : access MSSyst.Windows.Forms.Control.Typ'Class);
   procedure Clear_Window(
      color : dotnetgraphlibrary.Color_Type.Valuetype);
   procedure Clear_Window_Static(
      color : dotnetgraphlibrary.Color_Type.Valuetype);
   procedure Close_Graph_Window;
   procedure Close_Graph_Window_Force;
   procedure Close_Graph_Window_Static(
      force : Standard.Boolean);
   function Closest_Color(
      red : Integer;
      green : Integer;
      blue : Integer) return dotnetgraphlibrary.Color_Type.Valuetype;
   function Closest_Color_Static(
      red : Integer;
      green : Integer;
      blue : Integer) return dotnetgraphlibrary.Color_Type.Valuetype;
   procedure Color_To_RGB(
      color : dotnetgraphlibrary.Color_Type.Valuetype;
      red : MSIL_Types.Int32_addrof;
      green : MSIL_Types.Int32_addrof;
      blue : MSIL_Types.Int32_addrof);
   procedure Color_To_RGB_Static(
      color : dotnetgraphlibrary.Color_Type.Valuetype;
      red : MSIL_Types.Int32_addrof;
      green : MSIL_Types.Int32_addrof;
      blue : MSIL_Types.Int32_addrof);
   procedure Display_Text(
      x : Integer;
      y : Integer;
      text : access MSSyst.String.Typ'Class;
      hue : dotnetgraphlibrary.Color_Type.Valuetype);
   procedure Display_Text_Static(
      x : Integer;
      y : Integer;
      text : access MSSyst.String.Typ'Class;
      hue : dotnetgraphlibrary.Color_Type.Valuetype);
   procedure Draw_Arc(
      x1 : Integer;
      y1 : Integer;
      x2 : Integer;
      y2 : Integer;
      startx : Integer;
      starty : Integer;
      endx : Integer;
      endy : Integer;
      hue : dotnetgraphlibrary.Color_Type.Valuetype);
   procedure Draw_Arc_Static(
      x1 : Integer;
      y1 : Integer;
      x2 : Integer;
      y2 : Integer;
      startx : Integer;
      starty : Integer;
      endx : Integer;
      endy : Integer;
      hue : dotnetgraphlibrary.Color_Type.Valuetype);
   procedure Draw_Bitmap(
      bitmap : Integer;
      x : Integer;
      y : Integer;
      width : Integer;
      height : Integer);
   procedure Draw_Bitmap_Static(
      bitmap : Integer;
      x : Integer;
      y : Integer;
      width : Integer;
      height : Integer);
   procedure Draw_Box(
      x1 : Integer;
      y1 : Integer;
      x2 : Integer;
      y2 : Integer;
      hue : dotnetgraphlibrary.Color_Type.Valuetype;
      filled : Standard.Boolean);
   procedure Draw_Box_Static(
      x1 : Integer;
      y1 : Integer;
      x2 : Integer;
      y2 : Integer;
      hue : dotnetgraphlibrary.Color_Type.Valuetype;
      filled : Standard.Boolean);
   procedure Draw_Circle(
      x : Integer;
      y : Integer;
      radius : Integer;
      hue : dotnetgraphlibrary.Color_Type.Valuetype;
      filled : Standard.Boolean);
   procedure Draw_Circle_Static(
      x : Integer;
      y : Integer;
      radius : Integer;
      hue : dotnetgraphlibrary.Color_Type.Valuetype;
      filled : Standard.Boolean);
   procedure Draw_Ellipse(
      x1 : Integer;
      y1 : Integer;
      x2 : Integer;
      y2 : Integer;
      hue : dotnetgraphlibrary.Color_Type.Valuetype;
      filled : Standard.Boolean);
   procedure Draw_Ellipse_Rotate(
      x1 : Integer;
      y1 : Integer;
      x2 : Integer;
      y2 : Integer;
      angle : Long_Float;
      hue : dotnetgraphlibrary.Color_Type.Valuetype;
      filled : Standard.Boolean);
   procedure Draw_Ellipse_Rotate_Static(
      x1 : Integer;
      y1 : Integer;
      x2 : Integer;
      y2 : Integer;
      angle : Long_Float;
      hue : dotnetgraphlibrary.Color_Type.Valuetype;
      filled : Standard.Boolean);
   procedure Draw_Ellipse_Static(
      x1 : Integer;
      y1 : Integer;
      x2 : Integer;
      y2 : Integer;
      hue : dotnetgraphlibrary.Color_Type.Valuetype;
      filled : Standard.Boolean);
   procedure Draw_Line(
      x1 : Integer;
      y1 : Integer;
      x2 : Integer;
      y2 : Integer;
      hue : dotnetgraphlibrary.Color_Type.Valuetype);
   procedure Draw_Line_Static(
      x1 : Integer;
      y1 : Integer;
      x2 : Integer;
      y2 : Integer;
      hue : dotnetgraphlibrary.Color_Type.Valuetype);
   procedure Flood_Fill(
      x : Integer;
      y : Integer;
      hue : dotnetgraphlibrary.Color_Type.Valuetype);
   procedure Flood_Fill_Static(
      x : Integer;
      y : Integer;
      hue : dotnetgraphlibrary.Color_Type.Valuetype);
   procedure FreezeGraphWindow;
   procedure FreezeGraphWindow_Static;
   function Get_Click_X return Integer;
   function Get_Click_Y return Integer;
   function Get_DLL_Version return Integer;
   function Get_DLL_Version_Static return Integer;
   function Get_Font_Height return Integer;
   function Get_Font_Height_Static return Integer;
   function Get_Font_Width return Integer;
   function Get_Font_Width_Static return Integer;
   function Get_Key return Wide_Character;
   function get_key_code return Integer;
   function Get_Key_Int return Integer;
   function Get_Key_String return access MSSyst.String.Typ'Class;
   procedure Get_Max_Size(
      width : MSIL_Types.Int32_addrof;
      height : MSIL_Types.Int32_addrof);
   procedure Get_Max_Size_Static(
      width : MSIL_Types.Int32_addrof;
      height : MSIL_Types.Int32_addrof);
   function Get_Max_X return Integer;
   function Get_Max_Y return Integer;
   procedure Get_Mouse_Button(
      which_button : dotnetgraphlibrary.Mouse_Button.Valuetype);
   procedure Get_Mouse_Button(
      which_button : dotnetgraphlibrary.Mouse_Button.Valuetype;
      x : MSIL_Types.Int32_addrof;
      y : MSIL_Types.Int32_addrof);
   procedure Get_Mouse_Button_Static(
      which_button : dotnetgraphlibrary.Mouse_Button.Valuetype;
      x : MSIL_Types.Int32_addrof;
      y : MSIL_Types.Int32_addrof);
   procedure Get_Mouse_Location(
      x : MSIL_Types.Int32_addrof;
      y : MSIL_Types.Int32_addrof);
   procedure Get_Mouse_Location_Static(
      x : MSIL_Types.Int32_addrof;
      y : MSIL_Types.Int32_addrof);
   function Get_Mouse_X return Integer;
   function Get_Mouse_Y return Integer;
   function Get_Pixel(
      x : Integer;
      y : Integer) return dotnetgraphlibrary.Color_Type.Valuetype;
   function Get_Pixel_Static(
      x : Integer;
      y : Integer) return dotnetgraphlibrary.Color_Type.Valuetype;
   function Get_Window_Height return Integer;
   function Get_Window_Height_Static return Integer;
   function Get_Window_Width return Integer;
   function Get_Window_Width_Static return Integer;
   function Is_Open return Standard.Boolean;
   function Is_Open_Static return Standard.Boolean;
   function Key_Down(
      key : Integer) return Standard.Boolean;
   function Key_Down_Static(
      key : Integer) return Standard.Boolean;
   function Key_Down_String(
      key : access MSSyst.String.Typ'Class) return Standard.Boolean;
   function Key_Hit return Standard.Boolean;
   function Key_Hit_Static return Standard.Boolean;
   function Load_Bitmap(
      filename : access MSSyst.String.Typ'Class) return Integer;
   function Load_Bitmap_Static(
      filename : access MSSyst.String.Typ'Class) return Integer;
   procedure MakeNonTopMost;
   procedure MakeNonTopMost_Static;
   procedure MakeTopMost;
   procedure MakeTopMost_Static;
   function Mouse_Button_Down(
      which_button : dotnetgraphlibrary.Mouse_Button.Valuetype) return Standard.Boolean;
   function Mouse_Button_Down_Static(
      which_button : dotnetgraphlibrary.Mouse_Button.Valuetype) return Standard.Boolean;
   function Mouse_Button_Pressed(
      which_button : dotnetgraphlibrary.Mouse_Button.Valuetype) return Standard.Boolean;
   function Mouse_Button_Pressed_Static(
      which_button : dotnetgraphlibrary.Mouse_Button.Valuetype) return Standard.Boolean;
   function Mouse_Button_Released(
      which_button : dotnetgraphlibrary.Mouse_Button.Valuetype) return Standard.Boolean;
   function Mouse_Button_Released_Static(
      which_button : dotnetgraphlibrary.Mouse_Button.Valuetype) return Standard.Boolean;
   procedure Open_Graph_Window(
      x_size : Integer;
      y_size : Integer);
   procedure Open_Graph_Window_Static(
      x_size : Integer;
      y_size : Integer);
   procedure Open_Topmost_Graph_Window(
      x_size : Integer;
      y_size : Integer);
   procedure Put_Pixel(
      x : Integer;
      y : Integer;
      hue : dotnetgraphlibrary.Color_Type.Valuetype);
   procedure Put_Pixel_Static(
      x : Integer;
      y : Integer;
      hue : dotnetgraphlibrary.Color_Type.Valuetype);
   function Random_Color return dotnetgraphlibrary.Color_Type.Valuetype;
   function Random_Extended_Color return dotnetgraphlibrary.Color_Type.Valuetype;
   procedure Save_Bitmap(
      filename : access MSSyst.String.Typ'Class);
   procedure Save_Bitmap_Static(
      filename : access MSSyst.String.Typ'Class);
   procedure Set_Window_Title(
      title : access MSSyst.String.Typ'Class);
   procedure Set_Window_Title_Static(
      title : access MSSyst.String.Typ'Class);
   procedure SetFontSize(
      size : Integer);
   procedure SetFontSize_Static(
      size : Integer);
   procedure Shutdown_Dotnetgraph;
   procedure UnfreezeGraphWindow;
   procedure UnfreezeGraphWindow_Static;
   procedure UpdateGraphWindow;
   procedure UpdateGraphWindow_Static;
   procedure Wait_For_Key;
   procedure Wait_For_Mouse_Button(
      which_button : dotnetgraphlibrary.Mouse_Button.Valuetype);
   procedure Wait_For_Mouse_Button_Static(
      which_button : dotnetgraphlibrary.Mouse_Button.Valuetype);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_dotnetgraph);
   pragma Import(MSIL,Abort_Operation,"Abort_Operation");
   pragma Import(MSIL,BARTPE_Initialize,"BARTPE_Initialize");
   pragma Import(MSIL,Clear_Window,"Clear_Window");
   pragma Import(MSIL,Clear_Window_Static,"Clear_Window_Static");
   pragma Import(MSIL,Close_Graph_Window,"Close_Graph_Window");
   pragma Import(MSIL,Close_Graph_Window_Force,"Close_Graph_Window_Force");
   pragma Import(MSIL,Close_Graph_Window_Static,"Close_Graph_Window_Static");
   pragma Import(MSIL,Closest_Color,"Closest_Color");
   pragma Import(MSIL,Closest_Color_Static,"Closest_Color_Static");
   pragma Import(MSIL,Color_To_RGB,"Color_To_RGB");
   pragma Import(MSIL,Color_To_RGB_Static,"Color_To_RGB_Static");
   pragma Import(MSIL,Display_Text,"Display_Text");
   pragma Import(MSIL,Display_Text_Static,"Display_Text_Static");
   pragma Import(MSIL,Draw_Arc,"Draw_Arc");
   pragma Import(MSIL,Draw_Arc_Static,"Draw_Arc_Static");
   pragma Import(MSIL,Draw_Bitmap,"Draw_Bitmap");
   pragma Import(MSIL,Draw_Bitmap_Static,"Draw_Bitmap_Static");
   pragma Import(MSIL,Draw_Box,"Draw_Box");
   pragma Import(MSIL,Draw_Box_Static,"Draw_Box_Static");
   pragma Import(MSIL,Draw_Circle,"Draw_Circle");
   pragma Import(MSIL,Draw_Circle_Static,"Draw_Circle_Static");
   pragma Import(MSIL,Draw_Ellipse,"Draw_Ellipse");
   pragma Import(MSIL,Draw_Ellipse_Rotate,"Draw_Ellipse_Rotate");
   pragma Import(MSIL,Draw_Ellipse_Rotate_Static,"Draw_Ellipse_Rotate_Static");
   pragma Import(MSIL,Draw_Ellipse_Static,"Draw_Ellipse_Static");
   pragma Import(MSIL,Draw_Line,"Draw_Line");
   pragma Import(MSIL,Draw_Line_Static,"Draw_Line_Static");
   pragma Import(MSIL,Flood_Fill,"Flood_Fill");
   pragma Import(MSIL,Flood_Fill_Static,"Flood_Fill_Static");
   pragma Import(MSIL,FreezeGraphWindow,"FreezeGraphWindow");
   pragma Import(MSIL,FreezeGraphWindow_Static,"FreezeGraphWindow_Static");
   pragma Import(MSIL,Get_Click_X,"Get_Click_X");
   pragma Import(MSIL,Get_Click_Y,"Get_Click_Y");
   pragma Import(MSIL,Get_DLL_Version,"Get_DLL_Version");
   pragma Import(MSIL,Get_DLL_Version_Static,"Get_DLL_Version_Static");
   pragma Import(MSIL,Get_Font_Height,"Get_Font_Height");
   pragma Import(MSIL,Get_Font_Height_Static,"Get_Font_Height_Static");
   pragma Import(MSIL,Get_Font_Width,"Get_Font_Width");
   pragma Import(MSIL,Get_Font_Width_Static,"Get_Font_Width_Static");
   pragma Import(MSIL,Get_Key,"Get_Key");
   pragma Import(MSIL,get_key_code,"get_key_code");
   pragma Import(MSIL,Get_Key_Int,"Get_Key_Int");
   pragma Import(MSIL,Get_Key_String,"Get_Key_String");
   pragma Import(MSIL,Get_Max_Size,"Get_Max_Size");
   pragma Import(MSIL,Get_Max_Size_Static,"Get_Max_Size_Static");
   pragma Import(MSIL,Get_Max_X,"Get_Max_X");
   pragma Import(MSIL,Get_Max_Y,"Get_Max_Y");
   pragma Import(MSIL,Get_Mouse_Button,"Get_Mouse_Button");
   pragma Import(MSIL,Get_Mouse_Button_Static,"Get_Mouse_Button_Static");
   pragma Import(MSIL,Get_Mouse_Location,"Get_Mouse_Location");
   pragma Import(MSIL,Get_Mouse_Location_Static,"Get_Mouse_Location_Static");
   pragma Import(MSIL,Get_Mouse_X,"Get_Mouse_X");
   pragma Import(MSIL,Get_Mouse_Y,"Get_Mouse_Y");
   pragma Import(MSIL,Get_Pixel,"Get_Pixel");
   pragma Import(MSIL,Get_Pixel_Static,"Get_Pixel_Static");
   pragma Import(MSIL,Get_Window_Height,"Get_Window_Height");
   pragma Import(MSIL,Get_Window_Height_Static,"Get_Window_Height_Static");
   pragma Import(MSIL,Get_Window_Width,"Get_Window_Width");
   pragma Import(MSIL,Get_Window_Width_Static,"Get_Window_Width_Static");
   pragma Import(MSIL,Is_Open,"Is_Open");
   pragma Import(MSIL,Is_Open_Static,"Is_Open_Static");
   pragma Import(MSIL,Key_Down,"Key_Down");
   pragma Import(MSIL,Key_Down_Static,"Key_Down_Static");
   pragma Import(MSIL,Key_Down_String,"Key_Down_String");
   pragma Import(MSIL,Key_Hit,"Key_Hit");
   pragma Import(MSIL,Key_Hit_Static,"Key_Hit_Static");
   pragma Import(MSIL,Load_Bitmap,"Load_Bitmap");
   pragma Import(MSIL,Load_Bitmap_Static,"Load_Bitmap_Static");
   pragma Import(MSIL,MakeNonTopMost,"MakeNonTopMost");
   pragma Import(MSIL,MakeNonTopMost_Static,"MakeNonTopMost_Static");
   pragma Import(MSIL,MakeTopMost,"MakeTopMost");
   pragma Import(MSIL,MakeTopMost_Static,"MakeTopMost_Static");
   pragma Import(MSIL,Mouse_Button_Down,"Mouse_Button_Down");
   pragma Import(MSIL,Mouse_Button_Down_Static,"Mouse_Button_Down_Static");
   pragma Import(MSIL,Mouse_Button_Pressed,"Mouse_Button_Pressed");
   pragma Import(MSIL,Mouse_Button_Pressed_Static,"Mouse_Button_Pressed_Static");
   pragma Import(MSIL,Mouse_Button_Released,"Mouse_Button_Released");
   pragma Import(MSIL,Mouse_Button_Released_Static,"Mouse_Button_Released_Static");
   pragma Import(MSIL,Open_Graph_Window,"Open_Graph_Window");
   pragma Import(MSIL,Open_Graph_Window_Static,"Open_Graph_Window_Static");
   pragma Import(MSIL,Open_Topmost_Graph_Window,"Open_Topmost_Graph_Window");
   pragma Import(MSIL,Put_Pixel,"Put_Pixel");
   pragma Import(MSIL,Put_Pixel_Static,"Put_Pixel_Static");
   pragma Import(MSIL,Random_Color,"Random_Color");
   pragma Import(MSIL,Random_Extended_Color,"Random_Extended_Color");
   pragma Import(MSIL,Save_Bitmap,"Save_Bitmap");
   pragma Import(MSIL,Save_Bitmap_Static,"Save_Bitmap_Static");
   pragma Import(MSIL,Set_Window_Title,"Set_Window_Title");
   pragma Import(MSIL,Set_Window_Title_Static,"Set_Window_Title_Static");
   pragma Import(MSIL,SetFontSize,"SetFontSize");
   pragma Import(MSIL,SetFontSize_Static,"SetFontSize_Static");
   pragma Import(MSIL,Shutdown_Dotnetgraph,"Shutdown_Dotnetgraph");
   pragma Import(MSIL,UnfreezeGraphWindow,"UnfreezeGraphWindow");
   pragma Import(MSIL,UnfreezeGraphWindow_Static,"UnfreezeGraphWindow_Static");
   pragma Import(MSIL,UpdateGraphWindow,"UpdateGraphWindow");
   pragma Import(MSIL,UpdateGraphWindow_Static,"UpdateGraphWindow_Static");
   pragma Import(MSIL,Wait_For_Key,"Wait_For_Key");
   pragma Import(MSIL,Wait_For_Mouse_Button,"Wait_For_Mouse_Button");
   pragma Import(MSIL,Wait_For_Mouse_Button_Static,"Wait_For_Mouse_Button_Static");
end dotnetgraphlibrary.dotnetgraph;
pragma Import(MSIL,dotnetgraphlibrary.dotnetgraph,
   ".ver 2:0:0:0",
   "[dotnetgraph]dotnetgraphlibrary.dotnetgraph");
