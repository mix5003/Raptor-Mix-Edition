-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.String;
with parse_tree;
package Generate_Interface is
   -- 1..3 is a fraud
   type bool_array is array(1..3) of boolean;
   type Typ is interface;
   pragma Convention(MSIL,Typ);
   type Generator is access all Typ'Class;
   procedure Array_1D_Assignment_After_Index(
      This : access Typ) is abstract;
   procedure Array_1D_Assignment_PastRHS(
      This : access Typ) is abstract;
   procedure Array_1D_Assignment_Start(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) is abstract;
   procedure Array_2D_Assignment_After_Indices(
      This : access Typ) is abstract;
   procedure Array_2D_Assignment_Between_Indices(
      This : access Typ) is abstract;
   procedure Array_2D_Assignment_PastRHS(
      This : access Typ) is abstract;
   procedure Array_2D_Assignment_Start(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) is abstract;
   procedure Declare_As_1D_Array(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) is abstract;
   procedure Declare_As_2D_Array(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) is abstract;
   procedure Declare_As_Variable(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) is abstract;

   procedure Declare_String_Variable(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) is abstract;
   procedure Done_Variable_Declarations(
      This : access Typ) is abstract;
   procedure Emit_And(
      This : access Typ) is abstract;
   procedure Emit_And_Shortcut(
      This : access Typ;
      left : access parse_tree.Boolean_Parseable'Class;
      right : access parse_tree.boolean2'Class;
      left_negated : Standard.Boolean) is abstract;
   procedure Emit_Array_Size(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) is abstract;
   function Emit_Call_Method(
      This : access Typ;
      name : Integer) return access MSSyst.Object.Typ'Class is abstract;
   function Emit_Call_Subchart(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) return access MSSyst.Object.Typ'Class is abstract;
   procedure Emit_Conversion(
      This : access Typ;
      o : Integer) is abstract;
   procedure Emit_Divide(
      This : access Typ) is abstract;
   procedure Emit_End_Conversion(
      This : access Typ;
      o : Integer) is abstract;
   procedure Emit_Exponentiation(
      This : access Typ) is abstract;
   procedure Emit_Get_Click(
      This : access Typ;
      x_or_y : Integer) is abstract;
   procedure Emit_Get_Mouse_Button(
      This : access Typ) is abstract;
   procedure Emit_Is_Array(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) is abstract;
   procedure Emit_Is_Array2D(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) is abstract;
   procedure Emit_Is_Number(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) is abstract;
   procedure Emit_Is_Character(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) is abstract;
   procedure Emit_Is_String(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) is abstract;
   procedure Emit_Last_Parameter(
      This : access Typ;
      o : access MSSyst.Object.Typ'Class) is abstract;
   procedure Emit_Left_Paren(
      This : access Typ) is abstract;
   procedure Emit_Load(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) is abstract;
   procedure Emit_Load_Array_2D_After_Indices(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) is abstract;
   procedure Emit_Load_Array_2D_Between_Indices(
      This : access Typ) is abstract;
   procedure Emit_Load_Array_2D_Start(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) is abstract;
   procedure Emit_Load_Array_After_Index(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) is abstract;
   procedure Emit_Load_Array_Start(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) is abstract;
   procedure Emit_Load_Boolean(
      This : access Typ;
      val : Standard.Boolean) is abstract;
   procedure Emit_Load_Number(
      This : access Typ;
      val : Long_Float) is abstract;
   procedure Emit_Load_Character(
      This : access Typ;
      val : Wide_Character) is abstract;
   procedure Emit_Load_String(
      This : access Typ;
      val : access MSSyst.String.Typ'Class) is abstract;
   procedure Emit_Load_String_Const(
      This : access Typ;
      val : access MSSyst.String.Typ'Class) is abstract;
   procedure Emit_Minus(
      This : access Typ) is abstract;
   procedure Emit_Mod(
      This : access Typ) is abstract;
   procedure Emit_Next_Parameter(
      This : access Typ;
      o : access MSSyst.Object.Typ'Class) is abstract;
   procedure Emit_No_Parameters(
      This : access Typ;
      o : access MSSyst.Object.Typ'Class) is abstract;
   procedure Emit_Not(
      This : access Typ) is abstract;
   procedure Emit_Or(
      This : access Typ) is abstract;
   procedure Emit_Or_Shortcut(
      This : access Typ;
      left : access parse_tree.boolean2'Class;
      right : access parse_tree.Boolean_Expression'Class) is abstract;
   procedure Emit_Past_Sleep(
      This : access Typ) is abstract;
   procedure Emit_Plugin_Call(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      parameters : access parse_tree.Parameter_List'Class) is abstract;
   procedure Emit_Plus(
      This : access Typ) is abstract;
   procedure Emit_Random(
      This : access Typ) is abstract;
   procedure Emit_Random_2(
      This : access Typ;
      first : Long_Float;
      last : Long_Float) is abstract;
   procedure Emit_Relation(
      This : access Typ;
      relation : Integer) is abstract;
   procedure Emit_Rem(
      This : access Typ) is abstract;
   procedure Emit_Right_Paren(
      This : access Typ) is abstract;
   procedure Emit_Sleep(
      This : access Typ) is abstract;
   procedure Emit_String_Length(
      This : access Typ) is abstract;
   procedure Emit_Times(
      This : access Typ) is abstract;
   procedure Emit_To_Integer(
      This : access Typ) is abstract;
   procedure Emit_Unary_Minus(
      This : access Typ) is abstract;
   procedure Emit_Xor(
      This : access Typ) is abstract;
   procedure Finish(
      This : access Typ) is abstract;
   function Get_Menu_Name(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
   procedure If_Done(
      This : access Typ;
      o : access MSSyst.Object.Typ'Class) is abstract;
   procedure If_Else_Part(
      This : access Typ;
      o : access MSSyst.Object.Typ'Class) is abstract;
   function If_Start(
      This : access Typ) return access MSSyst.Object.Typ'Class is abstract;
   procedure If_Then_Part(
      This : access Typ;
      o : access MSSyst.Object.Typ'Class) is abstract;
   procedure Input_Past_Prompt(
      This : access Typ) is abstract;
   procedure Input_Start_Variable(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) is abstract;
   procedure Input_Start_Array_1D(
      This : access Typ;
      Name : access MSSyst.String.Typ'Class;
      Reference : access parse_tree.Expression'Class) is abstract;
   procedure Input_Start_Array_2D(
      This : access Typ;
      Name : access MSSyst.String.Typ'Class;
      Reference : access Parse_Tree.Expression'Class;
      Reference2 : access parse_tree.Expression'Class) is abstract;
   function Is_Postfix(
      This : access Typ) return Standard.Boolean is abstract;
   procedure Loop_End(
      This : access Typ;
      o : access MSSyst.Object.Typ'Class) is abstract;
   procedure Loop_End_Condition(
      This : access Typ;
      o : access MSSyst.Object.Typ'Class) is abstract;
   function Loop_Start(
      This : access Typ;
      Is_While : Standard.Boolean;
      Is_Negated : Standard.Boolean) return access MSSyst.Object.Typ'Class is abstract;
   procedure Loop_Start_Condition(
      This : access Typ;
      o : access MSSyst.Object.Typ'Class) is abstract;
   procedure Output_Past_Expr(
      This : access Typ;
      has_newline : Standard.Boolean;
      is_string : Standard.Boolean) is abstract;
   procedure Output_Start(
      This : access Typ;
      has_newline : Standard.Boolean;
      is_string : Standard.Boolean) is abstract;
   procedure Start_Method(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) is abstract;
   procedure Variable_Assignment_PastRHS(
      This : access Typ) is abstract;
   procedure Variable_Assignment_Start(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) is abstract;
   procedure Indent(This : in Typ) is abstract;
private   pragma Export(MSIL, Indent, "Indent");
   pragma Export(MSIL,Array_1D_Assignment_After_Index,"Array_1D_Assignment_After_Index");
   pragma Export(MSIL,Array_1D_Assignment_PastRHS,"Array_1D_Assignment_PastRHS");
   pragma Export(MSIL,Array_1D_Assignment_Start,"Array_1D_Assignment_Start");
   pragma Export(MSIL,Array_2D_Assignment_After_Indices,"Array_2D_Assignment_After_Indices");
   pragma Export(MSIL,Array_2D_Assignment_Between_Indices,"Array_2D_Assignment_Between_Indices");
   pragma Export(MSIL,Array_2D_Assignment_PastRHS,"Array_2D_Assignment_PastRHS");
   pragma Export(MSIL,Array_2D_Assignment_Start,"Array_2D_Assignment_Start");
   pragma Export(MSIL,Declare_As_1D_Array,"Declare_As_1D_Array");
   pragma Export(MSIL,Declare_As_2D_Array,"Declare_As_2D_Array");
   pragma Export(MSIL,Declare_As_Variable,"Declare_As_Variable");
   pragma Export(MSIL,Declare_String_Variable,"Declare_String_Variable");
   pragma Export(MSIL,Done_Variable_Declarations,"Done_Variable_Declarations");
   pragma Export(MSIL,Emit_And,"Emit_And");
   pragma Export(MSIL,Emit_And_Shortcut,"Emit_And_Shortcut");
   pragma Export(MSIL,Emit_Array_Size,"Emit_Array_Size");
   pragma Export(MSIL,Emit_Call_Method,"Emit_Call_Method");
   pragma Export(MSIL,Emit_Call_Subchart,"Emit_Call_Subchart");
   pragma Export(MSIL,Emit_Conversion,"Emit_Conversion");
   pragma Export(MSIL,Emit_Divide,"Emit_Divide");
   pragma Export(MSIL,Emit_End_Conversion,"Emit_End_Conversion");
   pragma Export(MSIL,Emit_Exponentiation,"Emit_Exponentiation");
   pragma Export(MSIL,Emit_Get_Click,"Emit_Get_Click");
   pragma Export(MSIL,Emit_Get_Mouse_Button,"Emit_Get_Mouse_Button");
   pragma Export(MSIL,Emit_Is_Array,"Emit_Is_Array");
   pragma Export(MSIL,Emit_Is_Array2D,"Emit_Is_Array2D");
   pragma Export(MSIL,Emit_Is_Number,"Emit_Is_Number");
   pragma Export(MSIL,Emit_Is_String,"Emit_Is_String");
   pragma Export(MSIL,Emit_Is_Character,"Emit_Is_Character");
   pragma Export(MSIL,Emit_Last_Parameter,"Emit_Last_Parameter");
   pragma Export(MSIL,Emit_Left_Paren,"Emit_Left_Paren");
   pragma Export(MSIL,Emit_Load,"Emit_Load");
   pragma Export(MSIL,Emit_Load_Array_2D_After_Indices,"Emit_Load_Array_2D_After_Indices");
   pragma Export(MSIL,Emit_Load_Array_2D_Between_Indices,"Emit_Load_Array_2D_Between_Indices");
   pragma Export(MSIL,Emit_Load_Array_2D_Start,"Emit_Load_Array_2D_Start");
   pragma Export(MSIL,Emit_Load_Array_After_Index,"Emit_Load_Array_After_Index");
   pragma Export(MSIL,Emit_Load_Array_Start,"Emit_Load_Array_Start");
   pragma Export(MSIL,Emit_Load_Boolean,"Emit_Load_Boolean");
   pragma Export(MSIL,Emit_Load_Number,"Emit_Load_Number");
   pragma Export(MSIL,Emit_Load_Character,"Emit_Load_Character");
   pragma Export(MSIL,Emit_Load_String,"Emit_Load_String");
   pragma Export(MSIL,Emit_Load_String_Const,"Emit_Load_String_Const");
   pragma Export(MSIL,Emit_Minus,"Emit_Minus");
   pragma Export(MSIL,Emit_Mod,"Emit_Mod");
   pragma Export(MSIL,Emit_Next_Parameter,"Emit_Next_Parameter");
   pragma Export(MSIL,Emit_No_Parameters,"Emit_No_Parameters");
   pragma Export(MSIL,Emit_Not,"Emit_Not");
   pragma Export(MSIL,Emit_Or,"Emit_Or");
   pragma Export(MSIL,Emit_Or_Shortcut,"Emit_Or_Shortcut");
   pragma Export(MSIL,Emit_Plugin_Call,"Emit_Plugin_Call");
   pragma Export(MSIL,Emit_Plus,"Emit_Plus");
   pragma Export(MSIL,Emit_Random,"Emit_Random");
   pragma Export(MSIL,Emit_Random_2,"Emit_Random_2");
   pragma Export(MSIL,Emit_Relation,"Emit_Relation");
   pragma Export(MSIL,Emit_Rem,"Emit_Rem");
   pragma Export(MSIL,Emit_Right_Paren,"Emit_Right_Paren");
   pragma Export(MSIL,Emit_Past_Sleep,"Emit_Past_Sleep");
   pragma Export(MSIL,Emit_Sleep,"Emit_Sleep");
   pragma Export(MSIL,Emit_String_Length,"Emit_String_Length");
   pragma Export(MSIL,Emit_Times,"Emit_Times");
   pragma Export(MSIL,Emit_To_Integer,"Emit_To_Integer");
   pragma Export(MSIL,Emit_Unary_Minus,"Emit_Unary_Minus");
   pragma Export(MSIL,Emit_Xor,"Emit_Xor");
   pragma Export(MSIL,Finish,"Finish");
   pragma Export(MSIL,Get_Menu_Name,"Get_Menu_Name");
   pragma Export(MSIL,If_Done,"If_Done");
   pragma Export(MSIL,If_Else_Part,"If_Else_Part");
   pragma Export(MSIL,If_Start,"If_Start");
   pragma Export(MSIL,If_Then_Part,"If_Then_Part");
   pragma Export(MSIL,Input_Past_Prompt,"Input_Past_Prompt");
   pragma Export(MSIL,Input_Start_Variable,"Input_Start_Variable");
   pragma Export(MSIL,Input_Start_Array_1D,"Input_Start_Array_1D");
   pragma Export(MSIL,Input_Start_Array_2D,"Input_Start_Array_2D");
   pragma Export(MSIL,Is_Postfix,"Is_Postfix");
   pragma Export(MSIL,Loop_End,"Loop_End");
   pragma Export(MSIL,Loop_End_Condition,"Loop_End_Condition");
   pragma Export(MSIL,Loop_Start,"Loop_Start");
   pragma Export(MSIL,Loop_Start_Condition,"Loop_Start_Condition");
   pragma Export(MSIL,Output_Past_Expr,"Output_Past_Expr");
   pragma Export(MSIL,Output_Start,"Output_Start");
   pragma Export(MSIL,Start_Method,"Start_Method");
   pragma Export(MSIL,Variable_Assignment_PastRHS,"Variable_Assignment_PastRHS");
   pragma Export(MSIL,Variable_Assignment_Start,"Variable_Assignment_Start");
end Generate_Interface;
